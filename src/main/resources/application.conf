http {
  host = "0.0.0.0"
  host = ${?HOST}
  port = 5005
  port = ${?PORT}
}

health {
  name = "minesweeper"
  name = ${?SERVICE_NAME}
  version = "1.0.0"
  version = ${?APP_VERSION}
  build = "1"
  version = ${?APP_BUILD}
}

mongodb {
  database = "minesweeper"
  username = "admin"
  username = ${?MONGODB_USERNAME}
  password = "admin"
  password = ${?MONGODB_PASSWORD}
  hostname = "localhost"
  hostname = ${?MONGODB_HOSTNAME}
  database = "minesweeper"
  database = ${?MONGODB_DATABASE}
  port = 27017
  port = ${?MONGODB_PORT}
  uri = "mongodb://"${mongodb.username}":"${mongodb.password}"@"${mongodb.hostname}":"${mongodb.port}"/?authSource="${mongodb.database}"&maxPoolSize=10"
}

akka {
  loglevel = INFO
  stdout-loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  ssl-config {
    loose {
      disableHostnameVerification = false
      acceptAnyCertificate = true
    }
  }
  actor {
    # Set this to on to enable serialization-bindings define in
    # additional-serialization-bindings. Those are by default not included
    # for backwards compatibility reasons. They are enabled by default if
    # akka.remote.artery.enabled=on.
    enable-additional-serialization-bindings = off
  }

  default-dispatcher {
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 5
      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 2.0
      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 1000
    }

    thread-pool-executor {
      # minimum number of threads to cap factor-based core number to
      core-pool-size-min = 5
      # No of core threads ... ceil(available processors * factor)
      core-pool-size-factor = 2.0
      # maximum number of threads to cap factor-based number to
      core-pool-size-max = 1000
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 1
  }

  http {
    server {
      # The default value of the `Server` header to produce if no
      # explicit `Server`-header was included in a response.
      # If this value is the empty string and no header was included in
      # the request, no `Server` header will be rendered at all.
      server-header = ""

      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle connection timeouts.
      idle-timeout = 300 s

      # Defines the default time period within which the application has to
      # produce an HttpResponse for any given HttpRequest it received.
      # The timeout begins to run when the *end* of the request has been
      # received, so even potentially long uploads can have a short timeout.
      # Set to `infinite` to completely disable request timeout checking.
      #
      # If this setting is not `infinite` the HTTP server layer attaches a
      # `Timeout-Access` header to the request, which enables programmatic
      # customization of the timeout period and timeout response for each
      # request individually.
      request-timeout = infinite

      # The time period within which the TCP binding process must be completed.
      bind-timeout = 1s

      # The maximum number of concurrently accepted connections when using the
      # `Http().bindAndHandle` methods.
      #
      # This setting doesn't apply to the `Http().bind` method which will still
      # deliver an unlimited backpressured stream of incoming connections.
      max-connections = 1024

      # The maximum number of requests that are accepted (and dispatched to
      # the application) on one single connection before the first request
      # has to be completed.
      # Incoming requests that would cause the pipelining limit to be exceeded
      # are not read from the connections socket so as to build up "back-pressure"
      # to the client via TCP flow control.
      # A setting of 1 disables HTTP pipelining, since only one request per
      # connection can be "open" (i.e. being processed by the application) at any
      # time. Set to higher values to enable HTTP pipelining.
      # This value must be > 0 and <= 1024.
      pipelining-limit = 64

      # Enables/disables the addition of a `Remote-Address` header
      # holding the clients (remote) IP address.
      remote-address-header = off

      # Enables/disables the addition of a `Raw-Request-URI` header holding the
      # original raw request URI as the client has sent it.
      raw-request-uri-header = off

      # Enables/disables automatic handling of HEAD requests.
      # If this setting is enabled the server dispatches HEAD requests as GET
      # requests to the application and automatically strips off all message
      # bodies from outgoing responses.
      # Note that, even when this setting is off the server will never send
      # out message bodies on responses to HEAD requests.
      transparent-head-requests = on

      # Enables/disables the returning of more detailed error messages to
      # the client in the error response.
      # Should be disabled for browser-facing APIs due to the risk of XSS attacks
      # and (probably) enabled for internal or non-browser APIs.
      # Note that akka-http will always produce log messages containing the full
      # error details.
      verbose-error-messages = off

      # The initial size of the buffer to render the response headers in.
      # Can be used for fine-tuning response rendering performance but probably
      # doesn't have to be fiddled with in most applications.
      response-header-size-hint = 512

      # The requested maximum length of the queue of incoming connections.
      # If the server is busy and the backlog is full the OS will start dropping
      # SYN-packets and connection attempts may fail. Note, that the backlog
      # size is usually only a maximum size hint for the OS and the OS can
      # restrict the number further based on global limits.
      backlog = 100

      # If this setting is empty the server only accepts requests that carry a
      # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
      # Set to a non-empty value to be used in lieu of a missing or empty `Host`
      # header to make the server accept such requests.
      # Note that the server will never accept HTTP/1.1 request without a `Host`
      # header, i.e. this setting only affects HTTP/1.1 requests with an empty
      # `Host` header as well as HTTP/1.0 requests.
      # Examples: `www.spray.io` or `example.com:8080`
      default-host-header = ""

      # Socket options to set for the listening socket. If a setting is left
      # undefined, it will use whatever the default on the system is.
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = undefined
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }

      # Modify to tweak parsing settings on the server-side only.
      parsing {
        # no overrides by default, see `akka.http.parsing` for default values
        max-content-length = 268435456
      }
    }

    client {
      # The default value of the `User-Agent` header to produce if no
      # explicit `User-Agent`-header was included in a request.
      # If this value is the empty string and no header was included in
      # the request, no `User-Agent` header will be rendered at all.
      user-agent-header = minesweeper

      # The time period within which the TCP connecting process must be completed.
      connecting-timeout = 10s

      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle timeouts.
      idle-timeout = infinite

      # The initial size of the buffer to render the request headers in.
      # Can be used for fine-tuning request rendering performance but probably
      # doesn't have to be fiddled with in most applications.
      request-header-size-hint = 512

      # Socket options to set for the listening socket. If a setting is left
      # undefined, it will use whatever the default on the system is.
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = undefined
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }

      # Modify to tweak parsing settings on the client-side only.
      parsing {
        # no overrides by default, see `akka.http.parsing` for default values
      }

      # Enables/disables the logging of unencrypted HTTP traffic to and from the HTTP
      # client for debugging reasons.
      #
      # Note: Use with care. Logging of unencrypted data traffic may expose secret data.
      #
      # Incoming and outgoing traffic will be logged in hexdump format. To enable logging,
      # specify the number of bytes to log per chunk of data (the actual chunking depends
      # on implementation details and networking conditions and should be treated as
      # arbitrary).
      #
      # For logging on the server side, see akka.http.server.log-unencrypted-network-bytes.
      #
      # `off` : no log messages are produced
      # Int   : determines how many bytes should be logged per data chunk
      log-unencrypted-network-bytes = off
    }

    host-connection-pool {
      # The maximum number of parallel connections that a connection pool to a
      # single host endpoint is allowed to establish. Must be greater than zero.
      max-connections = 16

      # The minimum number of parallel connections that a pool should keep alive ("hot").
      # If the number of connections is falling below the given threshold, new ones are being spawned.
      # You can use this setting to build a hot pool of "always on" connections.
      # Default is 0, meaning there might be no active connection at given moment.
      # Keep in mind that `min-connections` should be smaller than `max-connections` or equal
      min-connections = 0

      # The maximum number of times failed requests are attempted again,
      # (if the request can be safely retried) before giving up and returning an error.
      # Set to zero to completely disable request retries.
      max-retries = 10

      # The maximum number of open requests accepted into the pool across all
      # materializations of any of its client flows.
      # Protects against (accidentally) overloading a single pool with too many client flow materializations.
      # Note that with N concurrent materializations the max number of open request in the pool
      # will never exceed N * max-connections * pipelining-limit.
      # Must be a power of 2 and > 0!
      max-open-requests = 1024

      # The maximum number of requests that are dispatched to the target host in
      # batch-mode across a single connection (HTTP pipelining).
      # A setting of 1 disables HTTP pipelining, since only one request per
      # connection can be "in flight" at any time.
      # Set to higher values to enable HTTP pipelining.
      # This value must be > 0.
      # (Note that, independently of this setting, pipelining will never be done
      # on a connection that still has a non-idempotent request in flight.
      #
      # Before increasing this value, make sure you understand the effects of head-of-line blocking.
      # Using a connection pool, a request may be issued on a connection where a previous
      # long-running request hasn't finished yet. The response to the pipelined requests may then be stuck
      # behind the response of the long-running previous requests on the server. This may introduce an
      # unwanted "coupling" of run time between otherwise unrelated requests.
      #
      # See http://tools.ietf.org/html/rfc7230#section-6.3.2 for more info.)
      pipelining-limit = 1

      # The time after which an idle connection pool (without pending requests)
      # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
      idle-timeout = 300s

      # Modify to tweak client settings for host connection pools only.
      #
      # IMPORTANT:
      # Please note that this section mirrors `akka.http.client` however is used only for pool-based APIs,
      # such as `Http().superPool` or `Http().singleRequest`.
      client = {
        # The default value of the `User-Agent` header to produce if no
        # explicit `User-Agent`-header was included in a request.
        # If this value is the empty string and no header was included in
        # the request, no `User-Agent` header will be rendered at all.
        user-agent-header = minesweeper

        # The time period within which the TCP connecting process must be completed.
        connecting-timeout = 10s

        # The time after which an idle connection will be automatically closed.
        # Set to `infinite` to completely disable idle timeouts.
        idle-timeout = 300s

        # The initial size of the buffer to render the request headers in.
        # Can be used for fine-tuning request rendering performance but probably
        # doesn't have to be fiddled with in most applications.
        request-header-size-hint = 512

        # The proxy configurations to be used for requests with the specified
        # scheme.
        proxy {
          # Proxy settings for unencrypted HTTP requests
          # Set to 'none' to always connect directly, 'default' to use the system
          # settings as described in http://docs.oracle.com/javase/6/docs/technotes/guides/net/proxies.html
          # or specify the proxy host, port and non proxy hosts as demonstrated
          # in the following example:
          # http {
          #   host = myproxy.com
          #   port = 8080
          #   non-proxy-hosts = ["*.direct-access.net"]
          # }
          http = default

          # Proxy settings for HTTPS requests (currently unsupported)
          https = default
        }

        # Socket options to set for the listening socket. If a setting is left
        # undefined, it will use whatever the default on the system is.
        socket-options {
          so-receive-buffer-size = undefined
          so-send-buffer-size = undefined
          so-reuse-address = undefined
          so-traffic-class = undefined
          tcp-keep-alive = undefined
          tcp-oob-inline = undefined
          tcp-no-delay = undefined
        }

        # IMPORTANT: Please note that this section is replicated in `client` and `server`.
        parsing {
          # no overrides by default, see `akka.http.parsing` for default values
        }
      }
    }
  }
}